import { createActions } from 'redux-actions';

const {
  clearCampaigns,
  setCampaigns,
  getCampaigns,
  getCampaignsSucceed,
  getCampaignsFailed,
  getCampaignById,
  getCampaignByIdSucceed,
  getCampaignByIdFailed,
  getCampaignsTotalCount,
  getCampaignsTotalCountSucceed,
  getCampaignsTotalCountFailed,
  deleteCampaign,
  deleteCampaignSucceed,
  deleteCampaignFailed,
  updateCampaign,
  updateCampaignSucceed,
  updateCampaignFailed,
  updateCampaignStatus,
  updateCampaignStatusSucceed,
  updateCampaignStatusFailed,
  setFilterByStatus,
  setFilterByCreationDate,
  setFilterByMessageType,
  setOrderField,
  setOrder,
  addComment,
  addCommentSucceed,
  addCommentFailed,
  getRetry,
  getRetrySucceed,
  getRetryFailed,
  createGroupForUndelivered,
  createGroupForUndeliveredSucceed,
  createGroupForUndeliveredFailed,
} = createActions({
  CLEAR_CAMPAIGNS: ()=>({}),
  SET_CAMPAIGNS: (campaigns) => ({campaigns}),
  GET_CAMPAIGNS: params => ({ params }),
  GET_CAMPAIGNS_SUCCEED: campaigns => ({ campaigns }),
  GET_CAMPAIGNS_FAILED: error => ({ error }),
  GET_CAMPAIGN_BY_ID: (id) => ({id}),
  GET_CAMPAIGN_BY_ID_SUCCEED: (campaign) => ({campaign}),
  GET_CAMPAIGN_BY_ID_FAILED: (error) => ({error}),
  GET_CAMPAIGNS_TOTAL_COUNT: () =>({}),
  GET_CAMPAIGNS_TOTAL_COUNT_SUCCEED: (campaignsTotalCount) =>({campaignsTotalCount}),
  GET_CAMPAIGNS_TOTAL_COUNT_FAILED:  (error) =>({error}),
  DELETE_CAMPAIGN: (id) => ({id}),
  DELETE_CAMPAIGN_SUCCEED: (succeed) => ({succeed}),
  DELETE_CAMPAIGN_FAILED: (error) => ({error}),
  UPDATE_CAMPAIGN: (id, params) => ({id, params}),
  UPDATE_CAMPAIGN_SUCCEED: (succeed) => ({succeed}),
  UPDATE_CAMPAIGN_FAILED: (error) => ({error}),
  UPDATE_CAMPAIGN_STATUS: (params) => ({params}),
  UPDATE_CAMPAIGN_STATUS_SUCCEED: (succeed) => ({succeed}),
  UPDATE_CAMPAIGN_STATUS_FAILED: (error) => ({error}),
  SET_FILTER_BY_STATUS: (filterByStatus) => ({filterByStatus}),
  SET_FILTER_BY_CREATION_DATE:(filterByCreationDate) => ({filterByCreationDate}),
  SET_FILTER_BY_MESSAGE_TYPE: (filterByMessageType) => ({filterByMessageType}),
  SET_ORDER_FIELD:(orderField) =>({orderField}),
  SET_ORDER: (order) => ({order}),
  ADD_COMMENT: (params) => ({params}),
  ADD_COMMENT_SUCCEED: (succeed) => ({succeed}),
  ADD_COMMENT_FAILED:(error)=>({error}),
  GET_RETRY: (campaign) => ({campaign}),
  GET_RETRY_SUCCEED: (retryData) => ({retryData}),
  GET_RETRY_FAILED: (error) => ({error}),
  CREATE_GROUP_FOR_UNDELIVERED: (params) => ({params}),
  CREATE_GROUP_FOR_UNDELIVERED_SUCCEED: (group_id) => ({group_id}),
  CREATE_GROUP_FOR_UNDELIVERED_FAILED: (error) => ({error})
});

export {
  clearCampaigns,
  setCampaigns,
  getCampaigns,
  getCampaignsSucceed,
  getCampaignsFailed,
  getCampaignById,
  getCampaignByIdSucceed,
  getCampaignByIdFailed,
  getCampaignsTotalCount,
  getCampaignsTotalCountSucceed,
  getCampaignsTotalCountFailed,
  deleteCampaign,
  deleteCampaignSucceed,
  deleteCampaignFailed,
  updateCampaign,
  updateCampaignSucceed,
  updateCampaignFailed,
  updateCampaignStatus,
  updateCampaignStatusSucceed,
  updateCampaignStatusFailed,
  setFilterByStatus,
  setFilterByCreationDate,
  setFilterByMessageType,
  setOrderField,
  setOrder,
  addComment,
  addCommentSucceed,
  addCommentFailed,
  getRetry,
  getRetrySucceed,
  getRetryFailed,
  createGroupForUndelivered,
  createGroupForUndeliveredSucceed,
  createGroupForUndeliveredFailed,
};
